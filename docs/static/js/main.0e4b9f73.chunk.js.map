{"version":3,"sources":["mods/plate/types/index.ts","mods/element/types/index.ts","mods/element/components/element/index.tsx","mods/elementEnemy/types/index.ts","mods/plate/components/plate/index.tsx","mods/element/classes/index.ts","mods/elementEnemy/classes/index.ts","mods/plate/classes/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["EnemiesMoveDirection","PlayerMoveDirection","ElementTypeEnum","ElementEnemySubtype","ElementComponent","props","element","style","width","height","getType","ENEMY","SHOT_ENEMY","SHOT_PLAYER","PLAYER","KA_BOOM","renderType","PlateComponent","state","stats","listOfElements","this","renderPlate","setState","plate","getStats","render","refreshStats","findCollisions","enemyShoot","calculateNextPos","playerShoot","movePlayer","LEFT","RIGHT","float","map","row","index","key","textAlign","paddingLeft","onClick","movePlayerLeft","bind","movePlayerRight","tick","React","Component","ElementClass","params","type","pos","x","y","ElementEnemyClass","subtype","GameClass","maxX","maxY","playerLife","playerPosOffsset","enemiesMoveOffsset","enemiesMoveState","DOWN","initLisOfElements","toRender","push","findElement","elementsToRemove","forEach","getPos","setPosX","setPosY","length","splice","elements","findElements","filter","isPos","isShotEnemy","find","isEnemy","isPlayer","console","error","bottomEnemies","randomEnemy","Math","floor","random","player","JSON","stringify","join","direction","add","NORMAL","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e4b9f73.chunk.js","sourcesContent":["import { ElementInterface } from \"../../element/types\";\n\nexport type ElemenInterfaceOrNull = ElementInterface | null;\nexport type GameClassRenderInterface = Array<Array<ElementInterface | null>>;\n\nexport interface PlateInterface {\n    movePlayer(direction: PlayerMoveDirection): void;\n    render(): GameClassRenderInterface;\n    getStats(): string;\n    calculateNextPos(): void;\n    findCollisions(): void;\n    playerShoot(): void;\n    enemyShoot(): void;\n}\n\nexport enum EnemiesMoveDirection {\n    LEFT,\n    RIGHT,\n    DOWN,\n}\n\nexport enum PlayerMoveDirection {\n    LEFT,\n    RIGHT,\n}\n","export enum ElementTypeEnum {\n    ENEMY = \"ENEMY\",\n    SHOT_ENEMY = \"SHOT_ENEMY\",\n    SHOT_PLAYER = \"SHOT_PLAYER\",\n    PLAYER = \"PLAYER\",\n    KA_BOOM = \"KA_BOOM\",\n}\n\nexport interface ElementPos {\n    x: number;\n    y: number;\n}\n\nexport interface ElementInterface {\n    getPos(): ElementPos;\n    getType(): ElementTypeEnum;\n    isPos(x: number, y: number): boolean;\n    setPosX(x: number): void;\n    setPosY(y: number): void;\n}\n\nexport interface ElementClassParams {\n    type: ElementTypeEnum;\n    pos: ElementPos;\n}","import React from \"react\";\nimport { ElementInterface, ElementTypeEnum } from \"../../types\";\n\nexport interface Props {\n    element: ElementInterface;\n}\n\nexport const ElementComponent = (props: Props) => {\n    const { element } = props;\n\n    const renderType = () => {\n        switch (element.getType()) {\n            case ElementTypeEnum.ENEMY:\n                return \"#\";\n\n            case ElementTypeEnum.SHOT_ENEMY:\n                return \"!\";\n\n            case ElementTypeEnum.SHOT_PLAYER:\n                return \"|\";\n\n            case ElementTypeEnum.PLAYER:\n                return \"^\";\n\n            case ElementTypeEnum.KA_BOOM:\n                return \"*\";\n\n            default:\n                return \".\";\n        }\n    };\n\n    return (\n        <div style={{ width: \"10px\", height: \"10px\" }}>\n            {renderType()}\n        </div >\n\n    );\n};\n","import { ElementInterface, ElementPos } from \"../../element/types\";\n\nexport enum ElementEnemySubtype {\n    NORMAL,\n}\n\nexport interface ElementEnemyInterface extends ElementInterface {\n\n}\n\nexport interface ElementEnemyClassParams {\n    subtype: ElementEnemySubtype;\n    pos: ElementPos;\n}","import React from \"react\";\nimport { PlateInterface, PlayerMoveDirection, GameClassRenderInterface, ElemenInterfaceOrNull } from \"../../types\";\nimport { ElementComponent } from \"../../../element/components/element\";\n\ninterface Props {\n    plate: PlateInterface;\n}\n\ninterface State {\n    stats: string;\n    listOfElements: GameClassRenderInterface;\n}\n\nexport class PlateComponent extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            stats: \"\",\n            listOfElements: [],\n        };\n    }\n\n    componentDidMount() {\n        this.renderPlate();\n    }\n\n    private refreshStats() {\n        this.setState({ stats: this.props.plate.getStats() })\n    }\n\n    renderPlate() {\n        this.setState({ listOfElements: this.props.plate.render() })\n        this.refreshStats();\n    }\n\n    findCollisions() {\n        this.props.plate.findCollisions();\n        this.refreshStats();\n    }\n\n    enemyShoot() {\n        this.props.plate.enemyShoot();\n        this.refreshStats();\n    }\n\n    tick() {\n        this.calculateNextPos();\n        this.findCollisions();\n        this.renderPlate();\n    }\n\n    playerShoot() {\n        this.props.plate.playerShoot();\n        this.refreshStats();\n    }\n\n    calculateNextPos() {\n        this.props.plate.calculateNextPos();\n        this.refreshStats();\n    }\n\n    movePlayerLeft() {\n        this.props.plate.movePlayer(PlayerMoveDirection.LEFT);\n        this.refreshStats();\n    }\n\n    movePlayerRight() {\n        this.props.plate.movePlayer(PlayerMoveDirection.RIGHT);\n        this.refreshStats();\n    }\n\n    public render() {\n        const { listOfElements, stats } = this.state;\n        return (\n            <>\n                I'm the Plate\n                <div>\n                    <div style={{ float: 'left', width: '50%' }}>\n                        <table>\n                            <tbody>\n                                {listOfElements.map((row: ElemenInterfaceOrNull[], index: number) =>\n                                    <tr key={index}>\n                                        {row.map((element: ElemenInterfaceOrNull, index: number) => (\n                                            <td key={index} >\n                                                {element ? <ElementComponent element={element} /> : <div style={{ width: \"10px\", height: \"10px\" }}>.</div>}\n                                            </td>\n                                        ))}\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                        <br />\n                        <br />\n                        <div style={{ width: '100%' }}>\n                            <div style={{ float: 'left', width: '25%', textAlign: 'left', paddingLeft: '1em' }}>\n                                player<br />\n                                <button onClick={this.movePlayerLeft.bind(this)}>left</button>\n                                <button onClick={this.movePlayerRight.bind(this)}>right</button>\n                                <button onClick={this.playerShoot.bind(this)}>shoot!</button>\n                            </div>\n                            <div style={{ float: 'left', width: '25%', textAlign: 'left', paddingLeft: '1em' }}>\n                                enemy<br />\n                                <button onClick={this.enemyShoot.bind(this)}>shoot!</button>\n                            </div>\n                            <div style={{ float: 'left', width: '25%', textAlign: 'left', paddingLeft: '1em' }}>\n\n                                actions<br />\n                                <button onClick={this.tick.bind(this)}>tick ! (1,2,3)</button><br />\n                                <button onClick={this.calculateNextPos.bind(this)}>1. calculate next pos</button><br />\n                                <button onClick={this.findCollisions.bind(this)}>2. check collisions</button><br />\n                                <button onClick={this.renderPlate.bind(this)}>3. render</button><br />\n                            </div>\n                        </div>\n\n                    </div>\n                    <div style={{ float: 'left', width: '40%', textAlign: 'left', paddingLeft: '1em' }}>\n                        <small>\n                            <pre>\n                                {stats}\n                            </pre>\n                        </small>\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n","import {\n    ElementClassParams,\n    ElementInterface,\n    ElementPos,\n    ElementTypeEnum\n} from \"../types\";\n\nexport class ElementClass implements ElementInterface {\n    private type: ElementTypeEnum;\n    private pos: ElementPos;\n\n    constructor(params: ElementClassParams) {\n        this.type = params.type;\n        this.pos = params.pos;\n    }\n\n    public getPos(): ElementPos {\n        return this.pos;\n    }\n\n    public setPosX(x: number) {\n        this.pos.x = x;\n    }\n\n    public setPosY(y: number) {\n        this.pos.y = y;\n    }\n\n    public isPos(x: number, y: number): boolean {\n        return this.pos.x === x && this.pos.y === y;\n    }\n\n    public getType(): ElementTypeEnum {\n        return this.type;\n    }\n}","import { ElementClass } from \"../../element/classes\";\nimport { ElementEnemyClassParams, ElementEnemyInterface, ElementEnemySubtype } from \"../types\";\nimport { ElementTypeEnum } from \"../../element/types\";\n\nexport class ElementEnemyClass extends ElementClass implements ElementEnemyInterface {\n    private subtype: ElementEnemySubtype;\n\n    constructor(params: ElementEnemyClassParams) {\n        super({\n            pos: params.pos,\n            type: ElementTypeEnum.ENEMY,\n        });\n        this.subtype = params.subtype;\n    }\n}","import { EnemiesMoveDirection, GameClassRenderInterface, PlateInterface, ElemenInterfaceOrNull, PlayerMoveDirection } from \"../types\";\nimport { ElementClass } from \"../../element/classes\";\nimport { ElementInterface, ElementTypeEnum } from \"../../element/types\";\nimport { ElementEnemyClass } from \"../../elementEnemy/classes\";\nimport { ElementEnemySubtype } from \"../../elementEnemy/types\";\n\n/*\n *\n *   0,0  1,0  1,  0,3  0,4\n *   0,1  1,1  1,2  1,3  1,4\n *   ...\n */\n\n/*\n *\n * 7 - przechwyc wcisniejce strzalek: USER prawo/lewo\n *\n */\n\n\nexport class GameClass implements PlateInterface {\n    private maxX = 11;\n    private maxY = 10;\n    private playerLife = 3;\n    private listOfElements: ElementInterface[];\n    private playerPosOffsset = 0;\n    private enemiesMoveOffsset = 0;\n\n    private enemiesMoveState = [\n        EnemiesMoveDirection.RIGHT,\n        EnemiesMoveDirection.LEFT,\n        EnemiesMoveDirection.RIGHT,\n        EnemiesMoveDirection.LEFT,\n        EnemiesMoveDirection.DOWN,\n    ];\n\n    constructor() {\n        this.listOfElements = this.initLisOfElements();\n    }\n\n    public render(): GameClassRenderInterface {\n        const toRender = [];\n        for (let y = 0; y < this.maxY; y++) {\n            const row: ElemenInterfaceOrNull[] = [];\n            for (let x = 0; x < this.maxX; x++) {\n                row.push(this.findElement(x, y));\n            }\n            toRender.push(row);\n        }\n        return toRender;\n    }\n\n    public calculateNextPos() {\n        const elementsToRemove: number[] = [];\n        this.listOfElements.forEach((element, index) => {\n\n            if (element.getPos().x > this.maxX || element.getPos().y > this.maxY) {\n                elementsToRemove.push(index);\n            }\n\n            if (element.getPos().x < 0 || element.getPos().y < 0) {\n                elementsToRemove.push(index);\n            }\n\n            switch (element.getType()) {\n\n                case ElementTypeEnum.KA_BOOM:\n                    elementsToRemove.push(index);\n                    break;\n\n                case ElementTypeEnum.PLAYER:\n                    element.setPosX(element.getPos().x + this.playerPosOffsset);\n                    break;\n\n                case ElementTypeEnum.SHOT_ENEMY:\n                    element.setPosY(element.getPos().y + 1);\n                    break;\n\n                case ElementTypeEnum.SHOT_PLAYER:\n                    element.setPosY(element.getPos().y - 1);\n                    break;\n\n                case ElementTypeEnum.ENEMY:\n                    const length = this.enemiesMoveState.length;\n                    if (this.enemiesMoveOffsset === length) {\n                        this.enemiesMoveOffsset = 0;\n                    }\n                    if (this.enemiesMoveState[this.enemiesMoveOffsset] === EnemiesMoveDirection.LEFT) {\n                        element.setPosX(element.getPos().x - 1);\n                    }\n                    if (this.enemiesMoveState[this.enemiesMoveOffsset] === EnemiesMoveDirection.RIGHT) {\n                        element.setPosX(element.getPos().x + 1);\n                    }\n                    if (this.enemiesMoveState[this.enemiesMoveOffsset] === EnemiesMoveDirection.DOWN) {\n                        element.setPosY(element.getPos().y + 1);\n                    }\n                    break;\n            }\n        });\n        elementsToRemove.forEach(index => {\n            this.listOfElements.splice(index, 1);\n        });\n        this.playerPosOffsset = 0;\n        this.enemiesMoveOffsset++;\n    }\n\n    public findCollisions() {\n        for (let y = 0; y < this.maxY; y++) {\n            for (let x = 0; x < this.maxX; x++) {\n                const elements = this.findElements(x, y);\n                if (elements.length === 2) {\n\n                    // Remove both of them\n                    this.listOfElements = this.listOfElements.filter(element => element.isPos(x, y) === false);\n\n                    this.listOfElements.push(new ElementClass({\n                        type: ElementTypeEnum.KA_BOOM,\n                        pos: { x, y },\n                    }));\n\n                    const isShotEnemy = elements.find(element => element.getType() === ElementTypeEnum.SHOT_ENEMY);\n                    const isEnemy = elements.find(element => element.getType() === ElementTypeEnum.ENEMY);\n                    const isPlayer = elements.find(element => element.getType() === ElementTypeEnum.PLAYER);\n\n                    if ((isShotEnemy && isPlayer) || (isPlayer && isEnemy)) {\n                        this.playerLife--;\n                    }\n                }\n                if (elements.length > 2) {\n                    console.error('Something went wrong! More than 2 elements in one place!')\n                    console.error(elements);\n                }\n            }\n        }\n    }\n\n    public enemyShoot() {\n        let maxY = -1;\n        this.listOfElements.forEach(element => {\n            if (element.getType() === ElementTypeEnum.ENEMY) {\n                maxY = element.getPos().y > maxY ? element.getPos().y : maxY;\n            }\n        }\n        );\n        const bottomEnemies = this.listOfElements.filter(element => element.getType() === ElementTypeEnum.ENEMY && element.getPos().y === maxY);\n        const randomEnemy = bottomEnemies[Math.floor(Math.random() * bottomEnemies.length)];\n        this.listOfElements.push(new ElementClass({\n            type: ElementTypeEnum.SHOT_ENEMY,\n            pos: { x: randomEnemy.getPos().x, y: randomEnemy.getPos().y },\n        }));\n    }\n\n    public playerShoot() {\n        const player = this.listOfElements.find(element => element.getType() === ElementTypeEnum.PLAYER);\n        if (player) {\n            this.listOfElements.push(new ElementClass({\n                type: ElementTypeEnum.SHOT_PLAYER,\n                pos: { x: player.getPos().x, y: player.getPos().y },\n            }));\n        }\n    }\n\n    public getStats(): string {\n        return `\n            life: ${this.playerLife}\n            playerPosOffsset: ${this.playerPosOffsset}\n            elements:\n            ${this.listOfElements.map(\n            element => {\n                return `\n                    type: ${element.getType()}\n                    pos: ${JSON.stringify(element.getPos())}`\n            }).join(\"\\r\\n\")}`;\n    }\n\n    public movePlayer(direction: PlayerMoveDirection) {\n        this.playerPosOffsset = direction === PlayerMoveDirection.LEFT ? this.playerPosOffsset - 1 : this.playerPosOffsset + 1;\n    }\n\n    private findElement(x: number, y: number): ElemenInterfaceOrNull {\n        const found = this.listOfElements.find(element => element.isPos(x, y));\n        return found || null;\n    }\n\n    private findElements(x: number, y: number): ElementInterface[] {\n        const found = this.listOfElements.filter(element => element.isPos(x, y));\n        return found || [];\n    }\n\n    private initLisOfElements(): ElementInterface[] {\n        const listOfElements: ElementInterface[] = [];\n        for (let y = 0; y < 3; y++) {\n            let add = y === 2 ? 1 : y + 1;\n            for (let x = 0; x < 4; x++) {\n                listOfElements.push(new ElementEnemyClass({\n                    subtype: ElementEnemySubtype.NORMAL,\n                    pos: { x: x + add, y: y + 1 },\n                }));\n                add++;\n            }\n        }\n        listOfElements.push(new ElementClass({\n            type: ElementTypeEnum.PLAYER,\n            pos: { x: 5, y: 9 },\n        }));\n        return listOfElements;\n    }\n\n}\n","import React from 'react';\nimport './App.css';\nimport { PlateComponent } from './mods/plate/components/plate';\nimport { GameClass } from './mods/plate/classes';\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <PlateComponent plate={new GameClass()} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}